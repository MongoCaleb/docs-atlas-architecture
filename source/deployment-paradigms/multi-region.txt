.. _arch-center-paradigms-multi-region:

================================
Multi-Region Deployment Paradigm
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

Multi-region {+service+} deployments set up {+cluster+} nodes across
multiple regions (as defined by the cloud providers). Multi-region
deployments enhance protection in the case of a :ref:`regional outage
<arch-center-regional-outage>` by automatically rerouting traffic to a
node in another region for continuous availability and a
smooth user experience. Multi-region deployments can also enhance
performance and can help meet compliance requirements for :ref:`data sovereignty
<arch-center-compliance-data-sovereignty>`, such as the EU's General Data 
Protection Regulation (GDPR) law.

A multi-region deployment may have multiple regions within the same geography 
(a large area like a continent or country), or multiple regions in multiple 
geographies.

Multi-region deployments can exist with a single cloud provider or 
multiple cloud providers. To learn about multi-cloud deployments, see 
:ref:`arch-center-paradigms-multi-cloud`.

Consider the 2 use cases in the following image:

.. figure:: /includes/images/multi-region-types.png
   :figwidth: 750px
   :alt: An image showing three types of multi-region deployments

The first example shows a deployment to multiple regions in the same geography.  
This is a good solution if you have an application that has users primarily 
located in a single geography (in this case, the U.S.). You create a multi-region 
deployment in three regions within the U.S. This ensures low latency, 
since all regions are within the same geography, while also offering high 
availability if there's a regional outage on one of the nodes 
(for example, if ``us-east-1`` goes down).

The second example shows a deployment to a single region in each of multiple 
geographies. This is a good option if your application requires  
high availability for users in multiple geographies but you are willing to trade 
slightly higher latency for lower costs. You create a multi-region 
deployment with a region located in the U.S., Europe, and Asia. In this scenario, 
 This also helps comply with local regulations like GDPR.

The most complex example of a multi-region deployment has multiple regions in 
multiple geographies, ensures the highest level of availability with a single 
provider. If your application requires the very highest level of availability 
and lowest latency, consider a :ref:`arch-center-paradigms-multi-cloud`.

Multi-Region Deployment Use Cases
---------------------------------

The following use cases highlight different scenarios. In the first use case, we 
have a high-criticality application that we need to have distributed globally for 
availability and low latency. In this case, we want to deploy to at least 5 
regions in 3 or more regions.

The second scenario applies to a few different use cases. We may have a 
less-critical application, but one that still warrants a multi-region deployment. 
We may also have a high-criticality application but the users are in a single 
geography that only has 2 regions. In these scenarios, we can use a 3-node, 
2-region deployment architecture.

.. _arch-center-multi-region-tier-1:

5 Node, 3 Zone Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Mission critical applications require both high availability and low latency. 
To achieve this, we recommend an architecture that consists of a minimum of 5 
nodes spread over at least 3 regions. This provides high availability in at least 
2 regions. If a node goes down, the traffic can be served from the same 
region to ensure the same latency on the primary region. 

.. figure:: /includes/images/multi-region-tier-1.png
   :figwidth: 750px
   :alt: An image showing three types of multi-region deployments

Notes and Considerations
````````````````````````

- Your app servers should be deployed in each region that MongoDB nodes are 
  deployed. This gives you the ability to route read requests to the in-region  
  node, which reduces the response time to your end-users, and offloads requests 
  from the primary node. Write requests will always be directed to the primary.

- You should use Privatelink for connecting to the cluster, and VPC peering 
  between your app server VPCs. VPC peering ensures that if a network connection 
  is broken or {+service+} in that region goes down, the application tier can 
  still route to the primary node, first over the VPC peering, and then over the 
  private endpoint. 

- This architecture has the highest cost due to network traffic between regions 
  and having 5 or more data-bearing nodes. 

- This architecture provides the highest resiliency. There are no interruptions 
  during {+service+} operations (like an automated upgrade), and your application 
  can sustain a full regional failure with no interruption and manual 
  intervention required. 

.. _arch-center-multi-region-tier-2:

3 Nodes, 2 Regions Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you have an application that can experience limited downtime or maintenance 
windows without significant revenue impact, you can create an architecture that 
provides that level of availability by using 5 nodes in 2 regions. You have 3 
electable nodes spread across the 2 regions, and also have 2 read-only nodes in 
the secondary region. The electable nodes are in the **majority region**, while 
the region with fewer electable nodes is the **minority region**.

This is also an appropriate architecture if you need high availability and low 
latency in a geography that only has 2 regions.

.. figure:: /includes/images/multi-region-tier-2.png
   :figwidth: 750px
   :alt: An image showing three types of multi-region deployments

Notes and Considerations
````````````````````````
This is a good option for:

- Customers with only 2 approved regions.
- Meeting governance compliance about data storage.
- Applications where read operations need high uptime, but write operations can 
  experience some outage.

As with the "Tier 1" solution, this architecture provides increased protection 
against data loss, even in full regional outage. The system remains available 
in read-only mode in the secondary region if the primary region is lost. 

While this architecture is less expensive that the "Tier 1" solution provided 
above, the reduced cost comes with some caveats:

- If the majority region is lost, the minority region is not a fully-functional 
  cluster; it does not have a primary and can only accept reads but not writes.

  To turn it into a functional cluster again, an administrator needs to 
  reconfigure the 2 read-only nodes to electable nodes. However, there is a 
  possibility of data loss when the unavailable members are online again. If 
  your MongoDB process didn't replicate the write operations to the node that
  becomes the new primary, then the recovered replica set rolls back these 
  writes. To learn more, refer to  
  :atlas:`Reconfigure a Replica Set During a Regional Outage </reconfigure-replica-set-during-regional-outage>`.

  .. note::

     If the *minority* region is lost, no action is required, since the majority  
     region remains a fully functional cluster.

- In sharded clusters, if your MongoDB process didn't replicate chunk migrations, 
  the data inconsistency might cause orphaned chunks.

Alternative Solution
````````````````````
For further cost savings, you can design this architecture without the 2 read-only 
nodes. In addition to the caveats listed above, data size has significant impact 
on your decision since the data will need to be synchronized to secondaries 
whenever adding new nodes to the cluster. For example, 1TB of data averages 1
hour of recovery and synchronization time.


.. _arch-center-multi-region-considerations:

Considerations for Multi-Region Deployments
-------------------------------------------

Other considerations for multi-region deployments include:

- High availability depends on the deployment of nodes across
  regions as well as the number, distribution, and priority order of
  nodes. To learn more about recommended
  {+cluster+} topologies for high availability, see
  :ref:`arch-center-high-availability`.
- Multi-region deployments are available only for ``M10`` dedicated
  {+clusters+} and larger.
- High availability and low latency also depend on where you deploy 
  your application. When optimizing for availability and latency, plan the 
  deployment of your entire application stack, not just the database.

To learn how to configure multi-region deployments and learn about the
different types of nodes you can add, see 
:atlas:`Configure High Availability and Workload Isolation 
</cluster-config/multi-cloud-distribution/>` in the {+service+}
documentation.

For more considerations, see 
:atlas:`Considerations 
</cluster-config/multi-cloud-distribution/#considerations>` in the
{+service+} documentation.

Global Deployments 
------------------

Global {+service+} deployments are the most complex multi-region deployment 
paradigms, and therefore require very careful planning. In almost all cases,  
a :ref:`arch-center-paradigms-multi-region` (or its subset, a
:ref:`arch-center-paradigms-multi-cloud`) will fulfill your needs.

The following are a few reasons why you might consider a global deployment 
strategy:

- You need a single global connection string.
- You need to perform global aggregations across all customers.
- You need the ability to read/write for all customers from everywhere 
  in one logical cluster, while also having regional reads/writes.

.. note::

   The complexity of global deployments results in many opinions on best 
   practices. The {+atlas-arch-center+} does not currently cover recommendations
   specific to global deployments. Contact {+ps+} team to discuss your 
   specific requirements and to design a {+service+} global deployment 
   strategy.

Data Sovereignty and High Availability Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For compliance with data residency laws, data can be partitioned to
reside in specific regions, ensuring adherence to local regulations.
However, deploying to a single region sacrifices high availability if
there is a regional outage. 

You can configure a multi-region deployment for both high availability 
and data sovereignty. For example, for an application deployed with |aws| 
that requires data storage in Europe, you can deploy a multi-region deployment
to three regions within the EU (such as ``eu-west-1``, ``eu-west-2``, 
and ``eu-west-3``). This ensures data sovereignty since all regions are within 
the EU, while offering high availability if there's a regional outage that 
affects one of the nodes.


.. _arch-center-multi-region-rec-summary:

Recommendations for Multi-Region Deployments
---------------------------------------------

.. include:: /includes/rec-list.rst


.. toctree::
   :titlesonly:

   Latency Reduction Strategies </deployment-paradigms/latency-strategies>
