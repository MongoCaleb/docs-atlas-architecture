.. _arch-center-paradigms:

================================
{+service+} Deployment Paradigms
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

When deploying your database, you have 2 main choices. The following diagram 
shows these options, which are explained further below:

.. figure:: /includes/images/deployment-types.png
   :figwidth: 750px
   :alt: An image showing the different deployment options.

:ref:`Single-Region Deployment<arch-center-paradigms-single>`

This is the simplest deployment option. In a single-region deployment, your 
data is stored in one of a provider's regions (such as AWS's ``us-west-2`` 
or Google's ``asia-northeast3``). With this simplicity and lower cost comes 
the risk of lower availability and potentially higher latency, depending on the 
distribution of your application's users. Because {+service+} always provides a 
minimum of zone-level availability, you cluster nodes are spread across the 
availability zones within a single region, so if a single zone fails, your 
data is still available in the other zones.

:ref:`Multi-Region Deployment <arch-center-paradigms-multi-region>`

This deployment paradigm provides a more robust option with higher availability. 
There are several types of multi-region deployments:

- Deploying clusters to multiple regions hosted by a *single* cloud provider 
  within a single "geography" (large areas like a continent or countries). 
  For example, you deploy clusters in regions called ``us-1`` and ``us-3``, 
  both of which are in the United States and are managed by the same cloud 
  provider. This ensures availability if any given region fails.

- Deploying clusters to one or more regions in two or more geographies. 
  For example, you deploy clusters in regions called ``us-1`` and ``us-3``, 
  both of which are in the United States, and a third cluster in ``eu-2``, 
  which is in Europe. This ensures availability if any given region fails, or 
  if an entire geographic area is unavailable.
  
- Deploying clusters to multiple regions hosted by *multiple* cloud providers. 
  For example, you deploy clusters in the AWS region ``us-west-1`` and the GCP 
  region ``us-east4``. This provides the highest level of availability, ensuring 
  your data is available even if an entire cloud provider fails. 

- Global Cluster Deployment. This option should be considered for only the most complex 
  situations; for example, where you need global aggregation of user data, or 
  where legal terms dictate specific hosting requirements.

Availability Considerations
---------------------------
{+service+} has replication built into your deployments, which means: 

- Database instances are kept tightly in sync with each other, typically in the 
  range of milliseconds.
- In the event of an outage, failover between database instances is fully automatic. 
  It requires no human intervention, and takes only seconds.
- There is no data loss during a failover, including operations that are in 
  flight while the failover happens. If 
  :manual:`writeConcern </reference/write-concern>` is set to ``majority``,  
  these operations are retried after the failover is complete, to ensure that no 
  writes are lost.

Availability is often considered in terms of how fast your application can recover 
from an outage (RTO) and how much data might be lost in an outage (RPO). Because 
all {+service+} instances always have current data, failovers do not 
require restoring of backups.

.. note::

   The maximum RTO and RPO should be considered holistically across the entire 
   application, including component pieces, and not just a single database 
   component. 

Deployment Paradigm Comparison
------------------------------

To figure out which deployment pattern is right for you, it is necessary to 
break down your applications by how critical they are to your core business. The 
more important the application (in other words, the more money lost due to an 
outage), the more you will want to spend on an architecture to automatically 
handle any outage event.

The following table provides a comparison of deployment paradigms to help you 
determine the best fit for your needs: 

.. list-table::
   :header-rows: 1
   :widths: 20 20 20 20 20 

   * - Priority Level
     - Description
     - RTO
     - Deployment Model
     - Relative Cost

   * - **Tier 1**
     - Highest criticality apps. Requires fully automated failover even in the 
       event of regional outages.
     - 0
     - :ref:`3 Regions with 5 or more nodes <arch-center-multi-region-tier-1>`
     - $$$

   * - **Tier 2**
     - Lower criticality apps. Can experience some downtime or maintenance windows 
       without significant revenue impact.
     - > 1 hr. and < 8 hr.
     - :ref:`2 regions with 3 nodes and backups <arch-center-multi-region-tier-2>`
     - $$

   * - **Tier 3**
     - Lowest criticality apps. Can be done for 24 hrs without significant 
       revenue impact.
     - > 8 hr.
     - :ref:`3 nodes in a single region <arch-center-paradigms-single>`
     - $+

   * - **Non-Production**
     - Not critical. Environments that are not directly responsible for 
       revenue and are not customer-facing. Typically Dev and Test environments.
     - n/a
     - :ref:`Single node, single region <arch-center-paradigms-single>`
     - $0 and up

.. note::

   The cost of each deployment type depends on several factors, including the 
   provider(s) you select, the number of regions you need, the amount of storage, and 
   the processing power of the servers. For the latest pricing information, 
   refer to the `MongoDB Pricing <https://www.mongodb.com/pricing>`_.

.. toctree::
   :titlesonly:

   Single-Region </single-region>
   Multi-Region </multi-region>
   Multi-Cloud </multi-cloud>
   Hybrid </hybrid>
